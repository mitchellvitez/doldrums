/* three = if (2 == 3 || 3 < 4) 3 7; */
/* four = ((1 + 6 - 2) * 4) / 5; */

/* pair x y f = f x y; */
/* fst p = p K; */
/* snd p = p K1; */

/* f x y = */
/*   let a = pair x b */
/*     , b = pair y a */
/*   in */
/*     fst $ snd $ snd $ snd a; */

/* main = f three four; */

-- self-recursion works if we add the type for `fib : Int -> Int` in `primitiveTypes`
-- (the typechecking isn't powerful enough to do this by itself yet)
fib n =
  if (n == 0) 1 $
  if (n == 1) 1 $
  fib (n - 1) + fib (n - 2);

main = fib 8;

/* these two shouldn't mutually typecheck (Int mismatches String) */
/* func x = x + 7; */
/* main = func "hello"; */

/* id x = x; */
/* const a b = id a; */
/* main = const 9 8; */
